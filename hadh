#include <stdio.h>
#include <stdlib.h>
#define TABLE_SIZE 10
int h[TABLE_SIZE];
void insert(int key) {
    int hkey = key % TABLE_SIZE;
    int hash2 = 7 - (key % 7);
    int index, i;
    for (i = 0; i < TABLE_SIZE; i++) {
        index = (hkey + i * hash2) % TABLE_SIZE;
        
        if (h[index] == 0) {
            h[index] = key;
            printf("\nElement %d inserted at index %d\n", key, index);
            return;
        }
    }
    printf("\nElement cannot be inserted. Hash table is full.\n");
}
void search(int key) {
    int hkey = key % TABLE_SIZE;
    int hash2 = 7 - (key % 7);
    int index, i;
    for (i = 0; i < TABLE_SIZE; i++) {
        index = (hkey + i * hash2) % TABLE_SIZE;
        if (h[index] == key) {
            printf("\nElement %d found at index %d\n", key, index);
            return;
        }
    }
    printf("\nElement not found in the hash table\n");
}
void display() {
    int i;
    printf("\nElements in the hash table are:\n");
    for (i = 0; i < TABLE_SIZE; i++) {
        printf("Hash table[%d]: %d\n", i, h[i]);
    }
}
int main() {
    int opt, key;
    printf("DOUBLE HASHING\n");
    while (1) {
        printf("\nPress 1. Insert 2. Display 3. Search 4. Exit\n");
        scanf("%d", &opt);
        switch (opt) {
            case 1:
                printf("\nEnter a value to insert into the hash table: ");
                scanf("%d", &key);
                insert(key);
                break;
            case 2:
                display();
                break;
            case 3:
                printf("\nEnter the element to search: ");
                scanf("%d", &key);
                search(key);
                break;
            case 4:
                exit(0);
            default:
                printf("\nInvalid option. Please try again.\n");
        }
    }
    return 0;
}