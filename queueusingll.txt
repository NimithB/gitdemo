#include<stdio.h>
#include<stdlib.h>

// Define a structure for a node in the linked list
struct Node {
    int data;
    struct Node* next;
};

// Define a structure for the queue, which contains pointers to the front and rear nodes
struct Queue {
    struct Node *front, *rear;
};

// Function to enqueue (insert) an element into the queue
void enqueue(struct Queue* q, int data) {
    // Create a new node
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    // If the queue is empty, set both front and rear to the new node
    if (q->rear == NULL) {
        q->front = q->rear = newNode;
        return;
    }

    // Otherwise, add the new node to the rear of the queue and update the rear pointer
    q->rear->next = newNode;
    q->rear = newNode;
}

// Function to dequeue (remove) an element from the queue
int dequeue(struct Queue* q) {
    // If the queue is empty, return -1 indicating an empty queue
    if (q->front == NULL)
        return -1;

    // Retrieve the data from the front node
    int data = q->front->data;

    // Temporarily store the front node and move the front pointer to the next node
    struct Node* temp = q->front;
    q->front = q->front->next;

    // If the front becomes NULL, update the rear to NULL as well
    if (q->front == NULL)
        q->rear = NULL;

    // Free the memory occupied by the dequeued node
    free(temp);

    // Return the dequeued data
    return data;
}

// Function to display the elements of the queue
void display(struct Queue* q) {
    // If the queue is empty, print a message
    if (q->front == NULL) {
        printf("Queue is empty.\n");
        return;
    }

    // Iterate through the nodes and print the data
    struct Node* temp = q->front;
    printf("Queue elements: ");
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

// Main function
int main() {
    // Create a queue
    struct Queue q;
    q.front = q.rear = NULL;

    // Enqueue some elements
    enqueue(&q, 10);
    enqueue(&q, 20);
    enqueue(&q, 30);

    // Display the elements
    display(&q);

    // Dequeue an element
    int removed = dequeue(&q);
    if (removed != -1) {
        printf("Dequeued element: %d\n", removed);
    }

    // Display the updated queue
    display(&q);

    // Return 0 to indicate successful execution
    return 0;
}
