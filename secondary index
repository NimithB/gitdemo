#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define datafile "stud6.txt"
#define indexfile "pri6.txt"
#define sindexfile "sec6.txt"
FILE *dfile, *ifile, *sifile;
int i, indsize=0, sindsize;
char buffer[100], skey[20];
int search(char* fusn);
void opener(FILE* file, const char* fn, const char* mode)
{
file = fopen(fn, mode);
if (!file)
{
printf("unable to open a file");
exit(1);
}
}
struct student
{
char dusn[15], name[20], branch[6], sem[5];
};
struct index
{
char iusn[15], addr[5];
};
struct sindex
{
char sname[20], susn[15];
};
struct index id[50], in;
struct sindex sid[50], sind;
void initial()
{
ifile = fopen(indexfile, "r");
if (!ifile)
{
indsize = 0;
return;
}
for (indsize = 0;; indsize++)
{
fscanf(ifile, "%[^|]|%[^\n]\n", id[indsize].iusn, id[indsize].addr);
if (feof(ifile))
break;
}
fclose(ifile);
}
void sinitial()
{
sifile = fopen(sindexfile, "r");
if (!sifile)
{
sindsize = 0;
return;
}
for (sindsize = 0;; sindsize++)
{
fscanf(sifile, "%[^|]|%[^\n]\n", sid[sindsize].sname, sid[sindsize].susn);
if (feof(sifile))
break;
}
fclose(sifile);
}
void write()
{
ifile = fopen(indexfile, "w");
for (i = 0; i < indsize; i++)
fprintf(ifile, "%s|%s\n", id[i].iusn, id[i].addr);
fclose(ifile);
}
void swrite()
{
sifile = fopen(sindexfile, "w");
for (i = 0; i < sindsize; i++)
fprintf(sifile, "%s|%s\n", sid[i].sname, sid[i].susn);
fclose(sifile);
}
void add()
{
int k, mode=0;
struct student s;
printf("enter the usn number=");
scanf("%s", s.dusn);
if (search(s.dusn) >= 0)
{
printf("usn is aly present we can't add to index file\n");
return;
}
for (i = indsize; i > 0; i--)
{
if (strcmp(s.dusn, id[i - 1].iusn) < 0)
id[i] = id[i - 1];
else
break;
}
if (mode==0)
opener(dfile, datafile, "a");
else
{
opener(dfile, datafile, "w");
mode = 1;
}
printf("enter the name=");
scanf("%s", s.name);
printf("enter the branch=");
scanf("%s", s.branch);
printf("enter the semester=");
scanf("%s", s.sem);
sprintf(buffer, "%s|%s|%s|%s", s.dusn, s.name, s.branch, s.sem);
fseek(dfile, 0, SEEK_END);
k = ftell(dfile);
fprintf(dfile, "%s\n", buffer);
strcpy(id[i].iusn, s.dusn);
sprintf(id[i].addr, "%d", k);
indsize++;
for (i = sindsize; i > 0; i--)
{
if (strcmp(s.name, sid[i - 1].sname) < 0)
sid[i] = sid[i - 1];
else if ((strcmp(s.name, sid[i - 1].sname) == 0) && (strcmp(s.dusn, sid[i - 1].susn) < 0))
sid[i] = sid[i - 1];
else
break;
}
strcpy(sid[i].sname, s.name);
strcpy(sid[i].susn, s.dusn);
sindsize++;
}
int search(char* fusn)
{
int low = 0, high = indsize - 1, mid;
while (low <= high)
{
mid = (low + high) / 2;
if (strcmp(fusn, id[mid].iusn) == 0)
return mid;
if (strcmp(fusn, id[mid].iusn) > 0)
low = mid + 1;
else
high = mid - 1;
}
return -1;
}
int sec_search()
{
int pos, j, flag = -1;
printf("\nenter the name to search(sec key):");
scanf("%s", skey);
printf("the searched record details are :\n");
printf("usn\t\tname\n");
opener(dfile, datafile, "r+");
for (j = 0; j < sindsize; j++)
{
if (strcmp(skey, sid[j].sname) == 0)
{
printf("%s\t\t%s\n", sid[j].susn, sid[j].sname);
flag = j;
}
}
return flag;
}
void remove()
{
char rusn[10];
int pos, spos;
printf("enter the usn number above listed to delete:");
scanf("%s", rusn);
for (i = 0; i < sindsize; i++)
{
if (strcmp(sid[i].susn, rusn) == 0)
{
spos = i;
break;
}
}
if (strcmp(sid[spos].sname, skey) == 0)
{
pos = search(rusn);
fseek(dfile, atoi(id[pos].addr), SEEK_SET);
fputc('$', dfile);
for (i = pos; i < indsize; i++)
id[i] = id[i + 1];
indsize--;
for (i = spos; i < sindsize; i++)
sid[i] = sid[i + 1];
sindsize--;
}
else
printf("usn number and name doesnot match");
}
void ssearch()
{
int pos, flag = -1;
printf("\nenter the name to search(sec key):");
scanf("%s", skey);
opener(dfile, datafile, "r+");
for (int j = 0; j < sindsize; j++)
{
if (strcmp(skey, sid[j].sname) == 0)
{
for (int i = 0; i < indsize; i++)
{
if (strcmp(sid[j].susn, id[i].iusn) == 0)
{
pos = i;
flag = i;
}
}
}
}
if (flag == -1)
{
printf("no data record ");
return;
}
fseek(dfile, atoi(id[pos].addr), SEEK_SET);
fscanf(dfile, "%[^|]|%[^|]|%[^|]|%[^\n]\n", s.dusn, s.name, s.branch, s.sem);
if (s.dusn[0] == '$')
{
printf("The record is already deleted!!\n");
return;
}
printf("Details: \n");
printf("USN\tName\tBranch\tSemester\n");
printf("%s\t%s\t%s\t%s\n", s.dusn, s.name, s.branch, s.sem);
fclose(dfile);
}
void datadisp()
{
printf("\nthe index file details are \n");
printf("\nusn\taddress");
for (i = 0; i < indsize; i++)
printf("\n%s\t%s", id[i].iusn, id[i].addr);
printf("\nthe secondary file details are \n");
printf("\nname\tprimary reference");
for (i = 0; i < sindsize; i++)
printf("\n%s\t%s", sid[i].sname, sid[i].susn);
printf("\nusn\tname\tbranch\tsem\n");
dfile = fopen(datafile, "r");
while (fscanf(dfile, "%[^|]|%[^|]|%[^|]|%[^\n]\n", s.dusn, s.name, s.branch, s.sem) != EOF)
{
if (s.dusn[0] != '$') {
printf("\n%s\t%s\t%s\t%s", s.dusn, s.name, s.branch, s.sem);
}
else
{
printf("\nDeleted record\n");
}
}
fclose(dfile);
}
int main()
{
int ch, flag;
initial();
sinitial();
for (;;)
{
printf("\n1-Add,2-display,3-search,4-delete,5-exit\n");
scanf("%d", &ch);
switch (ch)
{
case 1: printf("\nenter student details : \n");
add();
write();
swrite();
break;
case 2: opener(dfile, datafile, "r");
printf("\nthe indexfile, secondary file and data file\n");
datadisp();
break;
case 3: printf("To search based on sec key ");
ssearch();
break;
case 4: flag = sec_search();
if (flag == -1)
printf("no data record found");
else
{
remove();
write();
swrite();
}
break;
default: exit(0);
}
fclose(dfile);
fclose(ifile);
fclose(sifile);
}
return 0;
}